name: Add PR to project
on:
  pull_request:
    types: [open, review_requested, review_requested_removed]
jobs:
  track_pr:
    runs-on: ubuntu-latest
    steps:
      - name: 'Dump github content'
        run: echo '${{ toJSON(github.event) }}' | jq
        shell: bash

      - name: 'Dump PR title'
        run: echo '${{ toJSON(github.event.pull_request.title) }}'

      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
          USER: rdhar8
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -F number=$PROJECT_NUMBER > project_data.json
            echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_VALUE='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").options[] | select(.name == "Comments Added").id' project_data.json) >> $GITHUB_ENV

            echo 'Execution success' 
            echo ${{ env.PROJECT_ID }}

      - name: Get Items data
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
          USER: rdhar8
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId){
                ... on ProjectV2 {
                  items(first: 20) {
                    nodes{
                      id
                      content{
                        ...on PullRequest {
                          title
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId=$PROJECT_ID > items_data.json

            echo 'ITEM_ID='$(jq '.data.node.items.nodes[] | select(.content.title == ${{ toJSON(github.event.pull_request.title) }}) | .id' items_data.json) >> $GITHUB_ENV

            echo 'Execution success 2' 
            echo ${{ env.ITEM_ID }}
      
      - name: 'Dump Item Id'
        run: echo ${{ env.ITEM_ID }}

      - name: 'Dump Field Id'
        run: echo ${{ env.STATUS_FIELD_ID }}

      - name: 'Dump Field value'
        run: echo ${{ env.STATUS_FIELD_VALUE }}


