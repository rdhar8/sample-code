name: Move PR based on review status
on:
  pull_request:
    types: [review_requested, review_request_removed]
jobs:
  track_pr:
    runs-on: ubuntu-latest
    steps:
      - name: 'Dump github content'
        run: echo '${{ toJSON(github.event) }}' | jq
        shell: bash

      - name: 'Dump PR title'
        run: echo '${{ toJSON(github.event.pull_request.title) }}'

      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
          USER: rdhar8
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -F number=$PROJECT_NUMBER > project_data.json
            echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_VALUE_CODE_REVIEW='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").options[] | select(.name == "Code Review").id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_VALUE_CODE_REREVIEW='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").options[] | select(.name == "Re-review").id' project_data.json) >> $GITHUB_ENV

            echo 'STATUS_FIELD_VALUE_OPEN='$(jq '.data.user.projectV2.fields.nodes[] | select(.name == "Status").options[] | select(.name == "Open").id' project_data.json) >> $GITHUB_ENV

            echo 'Execution success' 
            echo ${{ env.PROJECT_ID }}

      - name: Get Items data
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
          USER: rdhar8
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId){
                ... on ProjectV2 {
                  items(first: 20) {
                    nodes{
                      id
                      content{
                        ...on PullRequest {
                          id
                          title
                        }
                      }
                    }
                  }
                }
              }
            }' -f projectId=$PROJECT_ID > items_data.json

            echo 'ITEM_ID='$(jq '.data.node.items.nodes[] | select(.content.id == ${{ toJSON(github.event.pull_request.node_id) }}) | .id' items_data.json) >> $GITHUB_ENV

            echo 'Execution success 2' 
            echo ${{ env.ITEM_ID }}
      
      - name: 'Dump Item Id'
        run: echo ${{ env.ITEM_ID }}

      - name: 'Dump Field Id'
        run: echo ${{ env.STATUS_FIELD_ID }}

      - name: 'Dump Field value for re-review'
        run: echo ${{ env.STATUS_FIELD_VALUE_CODE_REREVIEW }}

      - name: 'Store reviewers length in Env'
        run: echo 'NBR_REVIEWERS='$(echo '${{ toJSON(github.event) }}' | jq '.pull_request.requested_reviewers | length') >> $GITHUB_ENV

      - name: 'Dump nmbr reviewers'
        run: echo ${{ env.NBR_REVIEWERS }} 

      - name: 'Set Fields For Code Review'
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
        if: github.event.action == 'review_requested' && github.event.pull_request.review_comments == 0
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.STATUS_FIELD_VALUE_CODE_REVIEW }}

      - name: 'Set Fields For Open State'
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
        if: github.event.action == 'review_request_removed' && env.NBR_REVIEWERS == 0
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.STATUS_FIELD_VALUE_OPEN }}
      
      - name: 'Set Fields For Code Re-review'
        env:
          GITHUB_TOKEN: ${{ secrets.PR_TOKEN }}
        if: github.event.action == 'review_requested' && github.event.pull_request.review_comments > 0
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.STATUS_FIELD_VALUE_CODE_REREVIEW }}

